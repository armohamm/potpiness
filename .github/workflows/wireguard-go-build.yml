# This workflow will install Python dependencies, run tests and lint with a single version of Python
# 
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: wireguard-go-build

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'
jobs:
  cleanup:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
          workflow_id: ${{ github.event.workflow.id }}
          ignore_sha: true
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
  build:
    runs-on: ${{ matrix.os }}
    needs: cleanup
    timeout-minutes: 360
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false 
    steps:

      - name: Get Version Number
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            WGGO_VERSION=${{ github.event.inputs.version }}
          else
            WGGO_VERSION=$(curl -fsSL https://api.github.com/repos/WireGuard/wireguard-go/tags | grep 'name' | head -1 | cut -d'"' -f4)
          fi
          echo "WGGO_VERSION=${WGGO_VERSION}" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: bash build.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: wireguard-go-${{ env.WGGO_VERSION }}
          path: build

      - name: Upload to Release
        if: github.event.inputs.version == ''
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*
          tag: ${{ env.WGGO_VERSION }}
          overwrite: true
          file_glob: true
          prerelease: false
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    needs: generate
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9]
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests 
    - name: Test without log
      run: |
        python test.py -s > /dev/null 2>&1
  generate:
    needs: build
    timeout-minutes: 360
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false   
    steps:
    - uses: actions/checkout@v2
    - name: Set up 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests 
    - name: Generate README
      run: python generate.py

    - name: Commit README
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git add .
        git commit -am "Update README"
        git push --all -f https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
  test1:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    needs: test
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9]
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests 
    - name: Test without log
      run: |
        python test.py -s > /dev/null 2>&1
  test2:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    needs: test1
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9]
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests 
    - name: Test without log
      run: |
        python test.py -s > /dev/null 2>&1
  test3:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    needs: test2
    continue-on-error: ${{ matrix.allow-failure || true}}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9]
        os: [ubuntu-latest]
      fail-fast: false 
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests 
    - name: Test without log
      run: |
        python test.py -s > /dev/null 2>&1
